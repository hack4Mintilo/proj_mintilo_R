row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
# if (records_athletics_table_main$units %in% c("m", "m (track)")) {
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
# records_athletics_table_main$distance <- as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+")))
# }
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
}
scrapWikipedia_recordAthletics(country = "Ethiopian")
scrapWikipedia_recordAthletics <- function (country = NULL) {
## ------------------------------------------------------------------------- ##
## <!-- Step-1: scrape wikipedia page for list of records in athletics.  --> ##
## ------------------------------------------------------------------------- ##
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
## -- get references
# records_athletics_bib <- records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div[2]')%>%html_text()     ## needs pre-processing
## -- get records tables
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
## -- export raw datasets
write.xlsx(x = records_athletics_outdoorM, file = "./records_athletics_outdoorM.xlsx", sheetName = "records_athletics_outdoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
# if (records_athletics_table_main$units %in% c("m", "m (track)")) {
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
# records_athletics_table_main$distance <- as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+")))
# }
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
return(records_athletics_table_main)
}
records_athletics <- scrapWikipedia_recordAthletics(country = "Ethiopian")
dim(records_athletics)
head(records_athletics)
tail(records_athletics)
records_athletics
records_athletics[,c("units","distance")]
records_athletics[,c("Event","units","distance")]
scrapWikipedia_recordAthletics <- function (country = NULL) {
## ------------------------------------------------------------------------- ##
## <!-- Step-1: scrape wikipedia page for list of records in athletics.  --> ##
## ------------------------------------------------------------------------- ##
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
## -- get references
# records_athletics_bib <- records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div[2]')%>%html_text()     ## needs pre-processing
## -- get records tables
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
## -- export raw datasets
write.xlsx(x = records_athletics_outdoorM, file = "./records_athletics_outdoorM.xlsx", sheetName = "records_athletics_outdoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
## get distance for units="m"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
## get distance for units="km"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("km", "km (road)"),
1000 * as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
records_athletics_table_main$distance)
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
return(records_athletics_table_main)
}
records_athletics <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics[,c("Event","units","distance")]
records_athletics[,c("Event","comp_doorInOut","units","distance")]
country = "Ethiopian"
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
head(records_athletics_table_raw)
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
head(records_athletics_table)
records_athletics_table$Event
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mile|miles|hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
records_athletics_table
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
class(records_athletics_table_main)
head(records_athletics_table)
records_athletics_table
records_athletics_table[,c("Event","category","units","distance")]
records_athletics_table[,c("Event","category")]
scrapWikipedia_recordAthletics <- function (country = NULL) {
## ------------------------------------------------------------------------- ##
## <!-- Step-1: scrape wikipedia page for list of records in athletics.  --> ##
## ------------------------------------------------------------------------- ##
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
## -- get references
# records_athletics_bib <- records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div[2]')%>%html_text()     ## needs pre-processing
## -- get records tables
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
## -- export raw datasets
write.xlsx(x = records_athletics_outdoorM, file = "./records_athletics_outdoorM.xlsx", sheetName = "records_athletics_outdoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mile|miles|hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
## get distance for units="m"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
## get distance for units="km"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("km", "km (road)"),
1000 * as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
records_athletics_table_main$distance)
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
return(records_athletics_table_main)
}
records_athletics <- scrapWikipedia_recordAthletics(country = "Ethiopian")
dim(records_athletics)
records_athletics
records_athletics[,c("Event","units", "distance")]
records_athletics[,c("Event","sex","units", "distance")]
scrapWikipedia_recordAthletics <- function (country = NULL) {
## ------------------------------------------------------------------------- ##
## <!-- Step-1: scrape wikipedia page for list of records in athletics.  --> ##
## ------------------------------------------------------------------------- ##
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
## -- get references
# records_athletics_bib <- records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div[2]')%>%html_text()     ## needs pre-processing
## -- get records tables
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
## -- export raw datasets
write.xlsx(x = records_athletics_outdoorM, file = "./records_athletics_outdoorM.xlsx", sheetName = "records_athletics_outdoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mile|miles|hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
## get distance for units="m"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
## get distance for units="km"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("km", "km (road)"),
1000 * as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
records_athletics_table_main$distance)
## get distance for half-marathon
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("Half marathon"),
21*1000,
records_athletics_table_main$distance)
## get distance for full-marathon
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("Half marathon"),
42*1000,
records_athletics_table_main$distance)
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
return(records_athletics_table_main)
}
records_athletics <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics[,c("Event","units", "distance")]
scrapWikipedia_recordAthletics <- function (country = NULL) {
## ------------------------------------------------------------------------- ##
## <!-- Step-1: scrape wikipedia page for list of records in athletics.  --> ##
## ------------------------------------------------------------------------- ##
url_main <- "https://en.wikipedia.org/wiki"
url <- paste(url_main,"/List_of_", country,"_records_in_athletics",
sep = "")
records_athletics <- read_html(url)
## -- get references
# records_athletics_bib <- records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div[2]')%>%html_text()     ## needs pre-processing
## -- get records tables
records_athletics_outdoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]')%>%html_table(fill = TRUE))
records_athletics_outdoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]')%>%html_table(fill = TRUE))
records_athletics_indoorM <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]')%>%html_table(fill = TRUE))
records_athletics_indoorF <- as.data.frame(records_athletics%>%html_nodes(xpath='//*[@id="mw-content-text"]/div/table[4]')%>%html_table(fill = TRUE))
## -- export raw datasets
write.xlsx(x = records_athletics_outdoorM, file = "./records_athletics_outdoorM.xlsx", sheetName = "records_athletics_outdoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_outdoorF, file = "./records_athletics_outdoorF.xlsx", sheetName = "records_athletics_outdoorF",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorM, file = "./records_athletics_indoorM.xlsx", sheetName = "records_athletics_indoorM",
row.names = FALSE, col.names = TRUE)
write.xlsx(x = records_athletics_indoorF, file = "./records_athletics_indoorF.xlsx", sheetName = "records_athletics_indoorF",
row.names = FALSE, col.names = TRUE)
## -- combine tables
records_athletics_outdoorM <- records_athletics_outdoorM[, -8]
records_athletics_outdoorM$comp_doorInOut <- "outdoor"; records_athletics_outdoorF$comp_doorInOut <- "outdoor"
records_athletics_indoorM$comp_doorInOut <- "indoor"; records_athletics_indoorF$comp_doorInOut <- "indoor"
records_athletics_outdoorM$sex <- "m"; records_athletics_outdoorF$sex <- "f"
records_athletics_indoorM$sex <- "m"; records_athletics_indoorF$sex <- "f"
records_athletics_table_raw <- as.data.frame(rbind.fill(records_athletics_outdoorM, records_athletics_outdoorF,
records_athletics_indoorM, records_athletics_indoorF))
## export raw combined datasets
write.xlsx(x = records_athletics_table_raw, file = "./records_athletics_table_raw.xlsx", sheetName = "records_athletics_table_raw",
row.names = FALSE, col.names = TRUE)
## ------------------------------------------------- ##
## <!-- Step-3: Pre-process the messy web data.  --> ##
## ------------------------------------------------- ##
# records_athletics_table_raw$Event <- as.numeric(records_athletics_table_raw$Event)    ## first, keep only numeric values...
## drop records with no record time available
records_athletics_table <- records_athletics_table_raw[!(is.na(records_athletics_table_raw$Record) | records_athletics_table_raw$Record==""), ]
## drop competition which has strange values under Date column
# records_athletics_table$Date <- ifelse(str_detect(records_athletics_table$Date, "thlon\\>"), "", records_athletics_table$Date)   ## not working
## -- split the data
# records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+[ m|km]"), "main", "others")
#   if (str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]")) {
#     records_athletics_table$category <- "main"
#   }
#   else if (str_detect(records_athletics_table$Event, "Marathon")) {
#     records_athletics_table$category <- "Marathon"
#   }
## get category of the competition
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "\\d+\\s{1}[m|km]"), "main", "others")
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mara|Mara"), "Marathon", records_athletics_table$category)
records_athletics_table$category <- ifelse(str_detect(records_athletics_table$Event, "mile|miles|hurdles|steeplechase|walk|relay"), "others", records_athletics_table$category)
## split dataset by main vs others
records_athletics_table_main <- records_athletics_table[records_athletics_table$category %in% c("main", "Marathon"), ]
## ----------------------------------------------------------- ##
## <!-- Step-4: Further pre-process of the main web data.  --> ##
## ----------------------------------------------------------- ##
## get additional info about the competition, e.g., kind of units (m, km, etc) and category
records_athletics_table_main$units <- unlist(str_extract_all(records_athletics_table_main$Event, "[[:alpha:] ()]{2,}"))
records_athletics_table_main$units <- str_trim(records_athletics_table_main$units)
## get distance for units="m"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("m", "m (track)"),
as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
NA)
## get distance for units="km"
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("km", "km (road)"),
1000 * as.numeric(unlist(str_extract(records_athletics_table_main$Event, "\\d+"))),
records_athletics_table_main$distance)
## get distance for half-marathon
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("Half marathon"),
21*1000,
records_athletics_table_main$distance)
## get distance for full-marathon
records_athletics_table_main$distance <- ifelse(records_athletics_table_main$units %in% c("Marathon"),
42*1000,
records_athletics_table_main$distance)
## export raw combined datasets
#   write.xlsx(x = records_athletics_table, file = "./records_athletics_table.xlsx", sheetName = "records_athletics_table",
#              row.names = FALSE, col.names = TRUE)
#   write.xlsx(x = records_athletics_table_main, file = "./records_athletics_table_main.xlsx", sheetName = "records_athletics_table_main",
#              row.names = FALSE, col.names = TRUE)
return(records_athletics_table_main)
}
records_athletics <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics[,c("Event","units", "distance")]
