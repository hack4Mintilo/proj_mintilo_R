source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category")]
records_athletics_all <- records_athletics_all[order(records_athletics_all$year), ]
main_plt <- ggplot(data = records_athletics_all,
aes(year, distance,
colour = Athlete_profile,
group = Athlete_profile)) + geom_line() + xlab("Year") + ylab("Distance")
main_plt
main_plt + facet_wrap( ~ distance_category, ncol = 2)
main_plt + facet_wrap( ~ distance_category, ncol = 2, scales = "free")
main_plt + facet_wrap(sex ~ distance_category, ncol = 2, scales = "free")
main_plt + facet_wrap(distance_category ~ sex, ncol = 2, scales = "free")
main_plt <- ggplot(data = records_athletics_all,
aes(year, distance,
colour = Athlete_profile,
group = Athlete_profile)) + geom_line() + xlab("Year") + ylab("Distance")
main_plt
main_plt + facet_wrap(distance_category ~ sex, ncol = 2)
main_plt + facet_wrap(distance_category ~ sex, ncol = 2, scales = "free")
ggsave("./plt_distribution_records_by_sex_and_distance-category.png", device = "png")
final_plt <- main_plt + facet_wrap(distance_category ~ sex, ncol = 2, scales = "free")
final_plt
ggsave("./plt_distribution_records_by_sex_and_distance-category.png",
final_plt, scale = 2, device = "png")
ggsave("./plt_distribution_records_by_sex_and_distance-category_pdf.pdf",
final_plt, scale = 2, device = "pdf")
ggsave("./plt_distribution_records_by_sex_and_distance-category_new2.png",
final_plt, width = 30, height = 20, units = "cm")
head(records_athletics_eth)
country <- records_athletics_eth$Place[1:5,]
country <- records_athletics_eth$Place[1:5]
country
city <- str_extract(country, "[^.]*$")
city
city <- str_extract(country, "[^,]*$")
city
city <- str_extract(country, "[,^]*$")
city
city <- str_extract(country, "$[^,]*")
city
head(records_athletics_eth)
city <- str_extract(country, "\\w+(,)")
city
country
city <- str_extract(country, "\\w+\\s+(,)")
city
city <- str_extract(country, "\\w+\\s+\\w+(,)")
city
city <- str_extract(country, "\\w+\\s+?\\w+(,)")
city
city <- str_extract(country, "\\w+(\\s+)?\\w+(,)")
city
city <- str_extract(country, "\\w+(\\s+)?(\\w+)?(,)")
city
city <- str_extract(country, "\\w+(\\s+)?(\\w+)?(\\,)")
city
city <- str_extract(country, "\\w+(\\s+)?(\\w+)?")
city
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category")]
records_athletics_eth$country
source("./records_athletics_fn.R")
## scrap records hold by Ethiopian athletes
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
## country=Kenya
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_eth$country
count(records_athletics_eth$country)
count(records_athletics_ken$country)
count(records_athletics_eth$city)
source("./records_athletics_fn.R")
## scrap records hold by Ethiopian athletes
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
## country=Kenya
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
count(records_athletics_eth$city)
head(records_athletics_eth)
records_athletics_eth
s <- "Allen, Mr. William Henry"
str_extract(s, "\\w+(?=\\.)")
str_extract(s, "\\w+(?=\\,)")
source("./records_athletics_fn.R")
## scrap records hold by Ethiopian athletes
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
## country=Kenya
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
count(records_athletics_eth$city)
records_athletics_eth[,c("place","city","country")]
head(records_athletics_eth])
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
head(records_athletics_eth)
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
head(records_athletics_eth)
records_athletics_eth
records_athletics_eth[,c("place","city")]
head(records_athletics_eth)
records_athletics_eth[,c("Place","city")]
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_eth[,c("Place","city")]
install.packages("ggmap")
geocode("hamburg")
library(ggmap)       ## for getting longitude/latitude of a city
geocode("hamburg")
city <- records_athletics_eth$city[1:5]
city
geocode(city)
qwe=geocode(city)
class(qwe)
qwe[1]
qwe[2]
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_eth$city
records_athletics_eth[,c("Place","city","country")]
records_athletics_eth[,c("Place","city","country","lon","lat")]
names(records_athletics_eth)
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
city <- records_athletics_eth$Place[1:5]
city
str_split(city, ",", n = 2)
unlist(str_split(city, ",", n = 2))
unlist(str_split(city, ",", n = 2))[1]
unlist(str_split(city, ",", n = 2))[2]
unlist(str_split(city, ",", n = 2))[3]
str_split(city, ",", n = 2)
str_split(city, ",", n = 2)[1]
str_split(city, ",", n = 2)[[1]]
str_split(city, ",", n = 2)[[1]][1]
str_split(city, ",", n = 2)[[1]][2]
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_eth[,c("Place", "country", "city")]
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_eth[,c("Place", "country", "city")]
qwe <- c("a,b", "c,d")
test <- str_split(qwe, ",", n=2)
test
class(test)
qwe <- as.data.frame(qwe)
qwe
test <- str_split(qwe, ",", n=2)
test
test <- str_split(qwe, ",")
test
place <- records_athletics_eth$Place[1:5]
place
class(place)
str_split(place)
str_split(place, ",")
str_split(place, ",", n=2)
test <- unlist(str_split(place, ",", n=2))
test
str_split(place, ",", n=2)
place <- records_athletics_eth$Place[1]
place
str_split(place, ",", n=2)
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category")]
records_athletics_eth[,c("Place", "country", "city")]
dsin <- records_athletics_all
varin <- country
country <- dsin$varin
dsin <- records_athletics_all
country <- dsin$varin
country <- dsin[,dsin]
country <- dsin[, "dsin"]
records_athletics_all[,c("Place", "country", "city")]
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category",
"country", "city")]
country <- records_athletics_all$country
country_uniq <- unique(country)
c1 <- country_uniq[1]
c1
geocode(c1)
res=geocode(c1)
class(res)
res[1]
res[2]
get_geoLocation <- function (dsin = NULL, varin = NULL) {
country_all <- dsin$varin
country_uniq <- unique(country_all)
geo_res <- data.frame(lon = numeric(), lat = numeric())
for (country in country_uniq[1:2]) {
geo_val <- geocode(location = country)
geo_res <- as.data.frame(rbind.fill(geo_res, geo_val))
}
return(geo_res)
}
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = country)
geo_country
debug(get_geoLocation)
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = country)
country_all
get_geoLocation <- function (dsin = NULL, varin = NULL) {
country_all <- dsin[, varin]
country_uniq <- unique(country_all)
geo_res <- data.frame(lon = numeric(), lat = numeric())
for (country in country_uniq[1:2]) {
geo_val <- geocode(location = country)
geo_res <- as.data.frame(rbind.fill(geo_res, geo_val))
}
return(geo_res)
}
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = country)
get_geoLocation <- function (dsin = NULL, varin = NULL) {
country_all <- dsin[, varin]
country_uniq <- unique(country_all)
geo_res <- data.frame(lon = numeric(), lat = numeric())
for (country in country_uniq[1:2]) {
geo_val <- geocode(location = country)
geo_res <- as.data.frame(rbind.fill(geo_res, geo_val))
}
return(geo_res)
}
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
geo_country
get_geoLocation <- function (dsin = NULL, varin = NULL) {
country_all <- dsin[, varin]
country_uniq <- unique(country_all)
geo_res <- data.frame(country = character(), lon = numeric(), lat = numeric())
for (country in country_uniq[1:2]) {
geo_val <- geocode(location = country)
geo_val$country <- country
geo_res <- as.data.frame(rbind.fill(geo_res, geo_val))
}
return(geo_res)
}
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
geo_country
get_geoLocation <- function (dsin = NULL, varin = NULL) {
## get unique country/city names
country_all <- dsin[, varin]
country_uniq <- unique(country_all)
## get geo-location
geo_res <- data.frame(country = character(), lon = numeric(), lat = numeric())
for (country in country_uniq) {
geo_val <- geocode(location = country)
geo_val$country <- country
geo_res <- as.data.frame(rbind.fill(geo_res, geo_val))
}
return(geo_res)
}
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
geo_country
geo_city <- get_geoLocation(dsin = records_athletics_all, varin = "city")
geo_country
head(records_athletics_all)
head(records_athletics_eth)
write.xlsx(x = geo_country, file = "./geo_country.xlsx", sheetName = "geo_country",
row.names = FALSE, col.names = FALSE)
write.xlsx(x = geo_city, file = "./geo_city.xlsx", sheetName = "geo_city",
row.names = FALSE, col.names = FALSE)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
head(geo_country)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
debug(get_geoLocation)
geo_country <- get_geoLocation(dsin = records_athletics_all, varin = "country")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_country
uundebug(get_geoLocation())
undebug(get_geoLocation())
undebug(get_geoLocation)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_country
debug(get_geoLocation)
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_res
geo_res
undebug(get_geoLocation)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_country
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_country
debug(get_geoLocation)
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_val
geo_val
geo_res
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_country
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
head(geo_country)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
head(geo_country)
source("./get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_city <- get_geoLocation(dsin = records_athletics_all, place = "city")
geo_country
geo_city
geo_country[1]
geo_country[1,]
geo_city[1,]
head(records_athletics_eth)
athelete <- records_athletics_eth$Athlete[1:10]
athelete
str_split(athelete, "\\s+", n = 2)
str_split(athelete, "\\s", n = 2)
str_extract(athelete, "[^\\s+]*")
athelete
str_extract(athelete, "[^\\s+]*$")
source("./records_athletics_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
head(records_athletics_eth)
head(records_athletics_ken)
records_athletics_ken$Athlete
user <- "workuhm"
cwd <- paste("/Users/", user, "/Desktop/Data Science/Data Mining with R/proj_mintilo_R/proj_wikipedia/records_athletics", sep = "")
setwd(cwd)
library(rvest)       ## for scraping wikipedia page
library(xlsx)        ## for reading/writing xls files
library(plyr)        ## for merging dataframes
library(stringr)     ## for string manipulation
library(lubridate)   ## for date manipulation
library(ggplot2)     ## for ploting
library(reshape2)    ## for getting your data in the format ggplot2 would like
library(ggmap)       ## for getting longitude/latitude of a city
source("./functions/records_athletics_fn.R")
source("./functions/get_geoLocation_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category",
"country", "city")]
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
source("./functions/get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
dsin=records_athletics_all
place_type="country"
locations_all <- dsin[, place_type]
locations_uniq <- unique(locations_all)
geo_res <- data.frame(a = character(), b = numeric(), c = numeric())
place=locations_uniq[1]
place
geo_val <- geocode(location = place)
geo_val <- cbind(place, geo_val)
geo_res <- rbind(geo_res, geo_val)
geo_res
geo_res <- as.data.frame(geo_res)
colnames(geo_res) <- c(place_type,
paste("lon", "_", place_type, sep = ""),
paste("lat", "_", place_type, sep = ""))
geo_res
file_name <- paste("./outputs/tables/", "geoLocation", "_", place_type, ".xlsx", sep = "")
file_name
write.xlsx(x = geo_res, file = file_name, sheetName = file_name,
row.names = FALSE, col.names = TRUE)
write.xlsx(x = geo_res, file = paste("./outputs/tables/", "geoLocation", "_", place_type, ".xlsx", sep = ""), sheetName = file_name,
row.names = FALSE, col.names = TRUE)
file_name <- paste("./outputs/tables/geoLocation", "_", place_type, ".xlsx", sep = "")
sheet_name <- paste("geolocation_", place_type, sep = "")
write.xlsx(x = geo_res, file = file_name, sheetName = file_name,
row.names = FALSE, col.names = TRUE)
file_name <- paste("./outputs/tables/geoLocation", "_", place_type, ".xlsx", sep = "")
sheet_name <- paste("geolocation_", place_type, sep = "")
write.xlsx(x = geo_res, file = file_name, sheetName = sheet_name,
row.names = FALSE, col.names = TRUE)
source("./functions/records_athletics_fn.R")
source("./functions/get_geoLocation_fn.R")
geo_country <- get_geoLocation(dsin = records_athletics_all, place = "country")
geo_city <- get_geoLocation(dsin = records_athletics_all, place = "city")
install.packages("wordcloud")
library(wordcloud)   ## for analyzing string using word-cloud
install.packages("slam")
library("wordcloud", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("wordcloud")
install.packages("tm")
library(tm)
user <- "workuhm"
cwd <- paste("/Users/", user, "/Desktop/Data Science/Data Mining with R/proj_mintilo_R/proj_wikipedia/records_athletics", sep = "")
setwd(cwd)
user <- "workuhm"
user <- "workuhm"
user <- "workuhm"
cwd <- paste("/Users/", user, "/Desktop/Data Science/Data Mining with R/proj_mintilo_R/proj_wikipedia/records_athletics", sep = "")
setwd(cwd)
library(rvest)       ## for scraping wikipedia page
library(xlsx)        ## for reading/writing xls files
library(plyr)        ## for merging dataframes
library(stringr)     ## for string manipulation
library(lubridate)   ## for date manipulation
library(ggplot2)     ## for ploting
library(reshape2)    ## for getting your data in the format ggplot2 would like
library(ggmap)       ## for getting longitude/latitude of a city
install.packages("rvest")
library(rvest)       ## for scraping wikipedia page
install.packages("xlsx")
library(xlsx)        ## for reading/writing xls files
install.packages("plyr")
library(plyr)        ## for merging dataframes
install.packages("stringr")
library(stringr)     ## for string manipulation
install.packages("lubridate")
library(lubridate)   ## for date manipulation
install.packages("ggplot2")
library(ggplot2)     ## for ploting
install.packages("reshape2")
library(reshape2)    ## for getting your data in the format ggplot2 would like
install.packages("ggmap")
library(ggmap)       ## for getting longitude/latitude of a city
citation(ggmap)
citation('ggmap')
install.packages("tm")
library(tm)
install.packages("SnowballC")
library(SnowballC)
library(wordcloud)   ## for analyzing string using word-cloud
install.packages("wordcloud")
library(wordcloud)   ## for analyzing string using word-cloud
source("./functions/records_athletics_fn.R")
source("./functions/get_geoLocation_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_ken <- scrapWikipedia_recordAthletics(country = "Kenyan")
records_athletics_all <- as.data.frame(rbind.fill(records_athletics_eth, records_athletics_ken))
records_athletics_all <- records_athletics_all[, c("Event", "Athlete", "comp_doorInOut", "sex", "Athlete_profile", "category", "year", "distance", "distance_category",
"country", "city", "fname", "lname")]
head(records_athletics_all)
fname_corpus <- Corpus(VectorSource(records_athletics_all$fname))
fname_corpus <- tm_map(fname_corpus, content_transformer(tolower))
fname_corpus <- tm_map(fname_corpus, removePunctuation)
fname_corpus <- tm_map(fname_corpus, PlainTextDocument)
fname_corpus <- tm_map(fname_corpus, removeWords, stopwords('english'))
fname_corpus <- tm_map(fname_corpus, stemDocument)
wordcloud(fname_corpus, max.words = 100, random.order = FALSE)
wordcloud(fname_corpus, random.order = FALSE)
fname_corpus
fname_corpus <- Corpus(VectorSource(records_athletics_all$fname))
fname_corpus
fname_corpus <- tm_map(fname_corpus, content_transformer(tolower))
fname_corpus <- tm_map(fname_corpus, removePunctuation)
fname_corpus <- tm_map(fname_corpus, PlainTextDocument)
fname_corpus <- tm_map(fname_corpus, content_transformer(tolower))
fname_corpus <- tm_map(fname_corpus, removePunctuation)
fname_corpus <- tm_map(fname_corpus, removeWords, stopwords('english'))
fname_corpus <- tm_map(fname_corpus, stemDocument)
wordcloud(fname_corpus, random.order = FALSE)
wordcloud(fname_corpus, min.freq = 2, random.order = FALSE)
?wordcloud
wordcloud(fname_corpus, min.freq = 2, random.order = FALSE,
scale = c(8,0.5))
wordcloud(fname_corpus, min.freq = 2, random.order = FALSE,
scale = c(5,0.5))
par(mar=rep(0, 4))
plot.new()
wordcloud(fname_corpus, min.freq = 2, random.order = FALSE,
scale = c(5,0.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(5,0.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(4.5,0.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(3,0.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(3,5.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(3.5,.5))
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(4,.5))
png("./outputs/plots/wordcloud_fname.png")
wordcloud(fname_corpus, min.freq = 1, random.order = FALSE, scale = c(4,.5))
dev.off()
source("./functions/get_wordcloud_fn.R")
get_wordcloud(dsin = records_athletics_all, min_freq = 1, varin = "fname")
get_wordcloud(dsin = records_athletics_all, min_freq = 1, varin = "city")
get_wordcloud(dsin = records_athletics_all, min_freq = 1, varin = "country")
install.packages("countrycode")
library(countrycode)
countrycode(sourcevar = 'Ethiopia', origin = 'country.name', destination = 'iso3c')
records_athletics_all$cntry_code <- countrycode(sourcevar = records_athletics_all$country, origin = 'country.name', destination = 'iso3c')
records_athletics_all[,c("country", "cntry_code")]
countrycode(sourcevar = 'Amsterdam', origin = 'city.name', destination = 'iso3c')
source("./functions/records_athletics_fn.R")
source("./functions/get_geoLocation_fn.R")
source("./functions/get_wordcloud_fn.R")
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
debug(scrapWikipedia_recordAthletics)
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
records_athletics_table$country
records_athletics_table$country[,c("Event", "Place", "country")]
names(records_athletics_table)
records_athletics_table$country[,c("Event", "Place", "country")]
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
undebug(scrapWikipedia_recordAthletics)
records_athletics_eth <- scrapWikipedia_recordAthletics(country = "Ethiopian")
