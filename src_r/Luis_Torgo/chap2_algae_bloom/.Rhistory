xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
for (j in seq(1,(K*M),M)){
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
if (m==1){
lines(c(a,a),c(-2.9,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
}
else{
lines(c(-2.9,4),c(a,a), pch = 15, col = 'green')
text(-2, a, index0[j2], family="mono", cex=1)
}
}
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
seq(1,(K*M),M)
j=5
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
j=1
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
lines(c(a,a),c(-2.9,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
j=3
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
c(a,a)
a
lines(c(-2.9,4),c(a,a), pch = 15, col = 'green')
K = nrow(object$coef.gamma)/2
M = ncol(object$subjects)
n = nrow(object$subjects)
Z = object$coef.gamma
index0 = object$index0
XX0 = object$XX
smv0 = object$geesummary
vnames0 = object$names
p = object$p
if(!any(smv0$mean[-c(1:K), 4] <= 0.05) == TRUE){
stop("At least one of the predictor must be statistically significant!")
}
for(m in 2:(M + 1)){
if(!any(smv0$mean[(sum(p[1:m])+1):sum(p[1:(m+1)]),4] <= 0.05) == TRUE){
stop("At least one of the predictor in each dimension must be statistically
significant!")
}
}
if(is.null(resp.var.labels)) resp.var.labels = paste(1:K)
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
seq(1,(K*M),M)
j=1
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
a
c(a,a)
lines(c(a,a),c(-2.9,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
j=3
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
a
lines(c(a,a),c(-2.9,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
j=5
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a=(Z[j,m]+Z[j+1,m])/2
m
a
lines(c(-2.9,4),c(a,a), pch = 15, col = 'green')
text(-3, a, index0[j2], family="mono", cex=1)
text(a, -3, index0[j2], family="mono", cex=1, srt=270)
seq(1,(K*M),M)
j=1
j2 = 0
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a = (Z[j,m]+Z[j+1,m])/2
m
a
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
lines(c(a,a),c(-2.9,4), pch = 15, col = 'green')
?lines
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
for (j in seq(1,(K*M),M)){
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a = (Z[j,m] + Z[j+1,m])/2
if (m == 1){
lines(c(a,a),c(-2.9,3), pch = 15, col = 'green')
text(a, -4, index0[j2], family="mono", cex=1, srt=270)
}
else{
lines(c(-2.9,3),c(a,a), pch = 15, col = 'green')
text(-3, a, index0[j2], family="mono", cex=1)
}
}
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
for (j in seq(1,(K*M),M)){
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a = (Z[j,m] + Z[j+1,m])/2
if (m == 1){
lines(c(a,a),c(-3,3), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
}
else{
lines(c(-3,3),c(a,a), pch = 15, col = 'green')
text(-3, a, index0[j2], family="mono", cex=1)
}
}
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
for (j in seq(1,(K*M),M)){
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a = (Z[j,m] + Z[j+1,m])/2
if (m == 1){
lines(c(a,a),c(-3,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
}
else{
lines(c(-4,3),c(a,a), pch = 15, col = 'green')
text(-3, a, index0[j2], family="mono", cex=1)
}
}
plot(Z[,1], Z[,2], col = 'green', pch = 16, cex = 1, xaxt = 'n', yaxt = 'n',
xlab = '', ylab = '', xlim = myX, ylim = myY, asp = 1, bty="n")
j2 = 0
for (j in seq(1,(K*M),M)){
j2 = j2 + 1
m = which(object$resp.dim.indic[j2,]==1)
a = (Z[j,m] + Z[j+1,m])/2
if (m == 1){
lines(c(a,a),c(-3,4), pch = 15, col = 'green')
text(a, -6, index0[j2], family="mono", cex=1, srt=270)
}
else{
lines(c(-3,4),c(a,a), pch = 15, col = 'green')
text(-3, a, index0[j2], family="mono", cex=1)
}
}
remove.packages("mldm")
install.packages("/Volumes/NIGATWA/HisFoldeR/PhDproject/Subproj-4/The_Rpackage_devpmt/Package/Draft_May2015/mldm_1.0.tar.gz", repos = NULL, type = "source")
library(mldm)
ls(2)
?mldm
data(NESDA)
#attach(NESDA)
## specify response indicator matrix
Z = matrix(c(1,1,0,0,0,0,0,1,1,1),5,2,byrow = FALSE)
## specify model formula, for each dimension
require(Formula)
mf <- Outcome | Outcome ~ EDU + GEN + AGE + N + E | EDU + GEN + AGE + N + E
mF <- Formula(mf)
## fit MLD model
out = mldm.fit(formula=mF, index = Index, resp.dim.ind = Z,
data = NESDA, id = pident, scale=TRUE)
out
summary(out)
biplot(out)
12345678%10000
12345678%%10000
12345678/10000
library("mldm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls(2)
?mldm.fit
?mldm
data("NESDA")
head(NESDA, 10)
library(mldm)
?mldm
30 + 36.4 + 38.8 + 35.7 + 33.9 + 37.1 + 22.8
data(mtcars)
head(mtcars)
par(mfrow=c(2,2))
plot(wt, mpg, main="Scatterplot of wt vs. mpg")
plot(mtcars$wt, mtcars$mpg, main="Scatterplot of wt vs. mpg")
plot(mtcars$wt, mtcars$disp, main="Scatterplot of wt vs disp")
hist(mtcars$wt, main="Histogram of wt")
boxplot(mtcars$wt, main="Boxplot of wt")
library("mldm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("mldm")
library(mldm)
library(mldm)
install.packages("/Volumes/NIGATWA/HisFoldeR/PhDproject/Subproj-4/The_Rpackage_devpmt/Package/Draft_May2015/pkg_Ubuntu/mldm_1.0.tar.gz", repos = NULL, type = "source")
library(mldm)
?mldm
data(NESDA)
#attach(NESDA)
## specify response indicator matrix
Z = matrix(c(1,1,0,0,0,0,0,1,1,1),5,2,byrow = FALSE)
## specify model formula, for each dimension
require(Formula)
mf <- Outcome | Outcome ~ EDU + GEN + AGE + N + E | EDU + GEN + AGE + N + E
mF <- Formula(mf)
## fit MLD model
out = mldm.fit(formula=mF, index = Index, resp.dim.ind = Z,
data = NESDA, id = pident, scale=TRUE)
out
summary(out)
biplot(out)
library(mldm)
install.packages("psychotools")
library(psychotools)
data("VerbalAggression")
head(VerbalAggression)
?VerbalAggression
names(VerbalAggression)
View(VerbalAggression)
search()
ls(2)
?itemresp
data("VerbalAggression", package = "psychotools")
r <- itemresp(VerbalAggression$resp[, 1:12])
str(r)
head(r)
View(r)
ls(2)
str(VerbalAggression)
class(VerbalAggression)
VerbalAggression[[1]]
data(VerbAgg)
install.packages("lme4")
library(lme4)
data("VerbAgg")
?VerbAgg
head(VerbAgg)
View(VerbAgg)
24*316
Z <- matrix(1, 24, 1)
Z
exp(1)
pi
log(10)
source("Biplot_BIPC.R")
## Load NESDA data
NESDA <- read.csv("NESDAbiv.csv")
NESDA <- NESDA[,-1]
colnames(NESDA)[c(2,3,4,5,14)] <- c("AGE","EDU","N", "E", "GEN")
## Keep predictors which are significant on both dimention
X1 <- NESDA[,c(3,4,5)]
## Define model parameters, beta (regression weights) and gamma (class points)
beta_lst <- matrix(c(-2.21,-0.15,1.03,-0.45,
-1.51,-0.12,1.14,-0.14),
nrow=4, ncol=2, byrow=F)
gamma_lst <- matrix(c(0,0,1,0,0,1,1-0.21,1-0.46),
nrow=4,ncol=2,byrow=T)
parms_all <- list(X=X1, B=beta_lst, Z=gamma_lst)
source("Biplot_BIPC.R")
## Load NESDA data
NESDA <- read.csv("NESDAbiv.csv")
NESDA <- NESDA[,-1]
colnames(NESDA)[c(2,3,4,5,14)] <- c("AGE","EDU","N", "E", "GEN")
## Keep predictors which are significant on both dimention
X1 <- NESDA[,c(3,4,5)]
## Define model parameters, beta (regression weights) and gamma (class points)
beta_lst <- matrix(c(-2.21,-0.15,1.03,-0.45,
-1.51,-0.12,1.14,-0.14),
nrow=4, ncol=2, byrow=F)
gamma_lst <- matrix(c(0,0,1,0,0,1,1-0.21,1-0.46),
nrow=4,ncol=2,byrow=T)
parms_all <- list(X=X1, B=beta_lst, Z=gamma_lst)
pwd
getwd()
install.packages("RMySQL")
library(RMySQL)
con = dbConnect(dbDriver("MySQL"), user="root", password="root", dbname="pookas")
con = dbConnect(dbDriver("MySQL"), user="root", password="root", dbname="pookas", host="localhost")
con = dbConnect(dbDriver("MySQL"), user="root", password="Bob1@Saron2", dbname="Course", host="localhost")
?"dbConnect"
con = dbConnect(MySQL(), user="root", password="Bob1@Saron2", dbname="Course", host="localhost")
install.packages("dbConnect")
library(dbConnect)
con = dbConnect(MySQL(), host="localhost", user="root", password="Bob1@Saron2", dbname="Course")
con = dbConnect(MySQL(), host="localhost", user="root", password="mysql", dbname="Course")
library(DBI)
library(RMySQL)
m<-dbDriver("MySQL");
con<-dbConnect(m,user='mcm',password='welcome323',host='omega',dbname='yeast');
con = dbConnect(MySQL(), host="localhost", username="root", password="mysql", dbname="Course")
con = dbConnect("MySQL", host="localhost", username="root", password="mysql", dbname="Course")
con = dbConnect(dbDriver("MySQL"), host="localhost", username="root", password="mysql", dbname="Course")
con = dbConnect(dbDriver("MySQL"), host="127.0.0.1", username="root", password="mysql", dbname="Course")
con = dbConnect(dbDriver("MySQL"), host="127.0.0.1", username="root", password="Bob1@Saron2", dbname="Course")
dbListTables(con)
dbListFields(con, 'lectures')
dbSendQuery(con, 'SELECT * FROM lectures')
tbl = dbSendQuery(con, 'SELECT * FROM lectures')
tbl = dbSendQuery(con, "SELECT * FROM lectures")
?"dbSendQuery"
tbl = dbSendQuery(con, "SELECT * FROM lectures;")
con = dbConnect(dbDriver("MySQL"), host="127.0.0.1", username="root", password="Bob1@Saron2", dbname="Course")
dbListTables(con)
result = dbSendQuery(con, "SELECT * FROM lectures;")
dbFetch(result)
library(RMySQL)
library(dbConnect)
con = dbConnect(dbDriver("MySQL"), host="127.0.0.1", username="root", password="Bob1@Saron2",
dbname="RobinNixon_publications")
dbListTables(con)
dbListFields(con, 'classics')
result = dbSendQuery(con, "SELECT * FROM classics;")
dbFetch(result)
barplot(result$author)
barplot(result[,2])
A=c(13,3,4,7,10)
B=c(15,3,5,11,9)
t.test(A, B, paired = T)
t.test(B, A, paired = T)
install.packages("ISLR")
library(ISLR)
ls(2)
ls(3)
ls(4)
clear
train = sample(392, 196)
train
length(unique(train))
train = sample(392, 196, replace = FALSE)
train
set.seed(1)
train = sample(392, 196)
train2 = sample(392, 196, replace = FALSE)
corr(train, train2)
cor(train, train2)
train2 = sample(392, 196, replace = FALSE)
train
set.seed(1)
train = sample(392, 196)
train[1:5]
lm.fit <- lm(mpg ~ horsepower, data=Auto, subset=train)
test.Auto <- Auto[-train]
head(test.Auto)
dim(test.Auto)
head(Auto)
head(test.Auto)
test.Auto <- Auto[-train,]
dim(test.Auto)
head(test.Auto)
head(Auto)
predict.mpg <- predict(object = lm.fit, newdata = test.Auto)
head(predict.mpg)
dim(Auto)
MSE <- mean((test.Auto$mpg - predict.mpg)^2)
MSE
source("calculate_RMSE_VSAPP.R")
source("calculate_MSE.R")
library(mldm)
install.packages("~/Desktop/PhD Folders_bkp_20170310/Thesis_20170310/mldm_package_paper_20170419/package_dev_area/Draft_201704/mldm_1.0.tar.gz", repos = NULL, type = "source")
library(mldm)
?mldm
?NESDA
data(NESDA)
head(NESDA)
x=2
y=3
z=x+y
z
x
y
z
hist(rnorm(100))
hist(runif(n = 100, min = 0, max = 30))
hist(runif(n = 100, min = 0, max = 1))
hist(rnorm(100))
hist(runif(n = 100, min = 0, max = 1))
severity = rnorm(n = 80, mean = 16, sd = 4)
hist(x = severity)
severity1 = rnorm(n = 80, mean = 16, sd = 4)
severity2 = rnorm(n = 80, mean = 11, sd = 3)
severity3 = rnorm(n = 80, mean = 13, sd = 5)
treatment = gl(n = 4, k = 20, labels = c("control", "ssri", "cbt", "both"))
clin_psych_data = data.frame(id=c(1:80), treatment, severity1, severity2, severity3)
head(clin_psych_data)
clin_psych_data
clin_psych_data
clin_psych_data_long <- reshape(clin_psych_data,
varying = c("severity1", "severity2", "severity3"),
v.names = "severity",
timevar = "time",
times = c("severity1", "severity2", "severity3"),
direction = "long")
clin_psych_data_long
clin_psych_data_long <- reshape(clin_psych_data,
varying = c("severity1", "severity2", "severity3"),
v.names = "severity",
timevar = "time",
times = c("severity1", "severity2", "severity3"), new.row.names = 1:240,
direction = "long")
clin_psych_data_long
clin_psych_data_long = clin_psych_data_long[order(clin_psych_data_long$id), ]
clin_psych_data_long
clin_psych_data_long
clin_psych_data_long <- reshape(clin_psych_data,
varying = c("severity1", "severity2", "severity3"),
v.names = "severity",
timevar = "time",
times = c("pre", "post1", "post2"), new.row.names = 1:240,
direction = "long")
clin_psych_data_long
clin_psych_data_long = clin_psych_data_long[order(clin_psych_data_long$id), ]
clin_psych_data_long
clin_psych_data_long
par(cex=.6)
with(clin_psych_data_long, interaction.plot(time, treatment, severity,
ylim = c(0, 30), lty = c(1, 12), lwd = 3,
ylab = "mean of severity", xlab = "time", trace.label = "treatment"))
par(cex=.6)
with(clin_psych_data_long, interaction.plot(time, treatment, severity,
ylim = c(0, 30), lty = c(1, 4), lwd = 3,
ylab = "mean of severity", xlab = "time", trace.label = "treatment"))
interaction.plot (Time, factor(Treatment), severity, lty=c(1:3),lwd=2,ylab="mean of Y", xlab="time", trace.label="Treatment")
interaction.plot (time, factor(Treatment), severity, lty=c(1:3),lwd=2,ylab="mean of Y", xlab="time", trace.label="Treatment")
?interaction.plot
?interaction.plot
with(data = clin_psych_data_long, interaction.plot (time, treatment, severity,col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
with(data = clin_psych_data_long, interaction.plot (time=c("pre", "post1", "post2"), treatment, severity,col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
with(data = clin_psych_data_long, interaction.plot (time=factor(time, levels=c("pre", "post1", "post2"), treatment, severity,col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
)
with(data = clin_psych_data_long, interaction.plot (time=factor(time, levels=c("pre", "post1", "post2"), treatment, severity,col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
)
with(data = clin_psych_data_long,
interaction.plot (
time=factor(time, levels=c("pre", "post1", "post2")),
treatment,
severity,
col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
with(data = clin_psych_data_long, interaction.plot (time=factor(time, levels=c("pre", "post1", "post2"), treatment, severity,col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
)
with(data = clin_psych_data_long,
interaction.plot (
time=factor(time, levels=c("pre", "post1", "post2")),
treatment,
severity,
col=1:4, lwd=2, ylab="mean of Y", xlab="time", trace.label="Treatment"))
savehistory("~/Desktop/dionysis.Rhistory")
savehistory("~/Desktop/dionysis.Rhistory")
determine_direction = function(message) {
if(message == "TAKE THE ROAD LESS TRAVELLED"){
print("Turn Left")
}
else if(message == "CONFORT IS DIVINE"){
print("Turn Right")
}
else {
print("I don't know")
}
}
determine_direction("TAKE THE ROAD LESS TRAVELLED")
determine_direction("TAKE THE ROAD LESS TRAVELLE")
determine_direction("CONFORT IS DIVINE")
?hist
print("I don't know")
print("I don't know")
rm(determine_direction())
View(determine_direction)
View(determine_direction)
rm(determine_direction)
function(message) {
if(message == "TAKE THE ROAD LESS TRAVELLED"){
print("Turn Left")
}
else if(message == "CONFORT IS DIVINE"){
print("Turn Right")
}
else {
print("I don't know")
}
}
determine_direction = function(message) {
if(message == "TAKE THE ROAD LESS TRAVELLED"){
print("Turn Left")
}
else if(message == "CONFORT IS DIVINE"){
print("Turn Right")
}
else {
print("I don't know")
}
}
#determine_direction("CONFORT IS DIVINE")
file_list = c(1:4)
for (file_name in file_list) {
print(file_name)
}
setwd("/Users/workuhm/Desktop/Data Science/Data Mining with R/src_r/Luis_Torgo/chap2_algae_bloom")
getwd()
install.packages("RCurl")
library(RCurl)
